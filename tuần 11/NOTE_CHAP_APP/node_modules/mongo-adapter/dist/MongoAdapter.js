"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _connectionStringParser = require("connection-string-parser");

var _mongodb = _interopRequireDefault(require("mongodb"));

var _errors = _interopRequireDefault(require("./errors"));

var _dataAdaptorBase = _interopRequireDefault(require("data-adaptor-base"));

var _gridfsStream = _interopRequireDefault(require("gridfs-stream"));

var ReplSet = _mongodb["default"].ReplSet,
    Server = _mongodb["default"].Server,
    MongoClient = _mongodb["default"].MongoClient,
    Db = _mongodb["default"].Db;

var MongoAdapter =
/*#__PURE__*/
function (_BaseAdaptor) {
  (0, _inherits2["default"])(MongoAdapter, _BaseAdaptor);

  function MongoAdapter() {
    (0, _classCallCheck2["default"])(this, MongoAdapter);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(MongoAdapter).apply(this, arguments));
  }

  (0, _createClass2["default"])(MongoAdapter, null, [{
    key: "deleteDatabase",

    /**
     * Creates a MongoDB connection
     *
     * @param {Object} credentials credentials object
     * @param {string} credentials.connectionString MongoDB connection url
     *
     * @returns {Promise<Object>} dbClient
     */

    /**
     *
     * @param {Object} configs
     * @param {string} connectionString database connection string
     *
     * @returns {ReplSet} replSet
     */

    /**
     * Disconnects current MongoDB connection or throws an error
     * if no connection exists
     *
     * @memberof Connector
     *
     * @param {Object} client Connected mongo database client
     *
     * @returns {void}
     */

    /**
     * Returns the document that matches the _id with the documentId
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {string} details.documentId
     * @param {Object} details.accessList
     * @param {boolean} details.isMasterKey
     *
     * @returns {Promise<object>} document
     */

    /**
     *
     * @param {string} appId
     * @param {Array} include
     * @param {Array} docs
     *
     * @returns {Promise<Array>} documents
     */

    /**
     * @param {Object} mongoClient
     * @param {string} appId
     * @param {string} tableName
     * @param {Object} qry
     *
     * @returns {Promise<Array>} documents
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.query
     * @param {Object} details.select
     * @param {Object} details.sort
     * @param {number} details.limit
     * @param {Object} details.skip
     * @param {Object} details.accessList
     * @param {boolean} details.isMasterKey
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.query
     * @param {Object} details.select
     * @param {Object} details.sort
     * @param {number} details.limit
     * @param {number} details.skip
     * @param {Object} details.accessList
     * @param {boolean} details.isMasterKey
     *
     * @returns {Promise<Object|void>} document
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {Array} details.documents
     *
     * @returns {Promise<Object>} documents
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.document
     *
     * @returns {Promise<Object>} document
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.query
     * @param {number} details.skip
     *
     * @returns {Promise<Object>} document
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Array} details.onKey
     * @param {Object} details.query
     * @param {Object} details.select
     * @param {number} details.limit
     * @param {number} details.skip
     *
     * @returns {Promise<Object>} document
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Array} details.pipeline
     * @param {number} details.limit
     * @param {number} details.skip
     * @param {Object} details.accessList
     * @param {boolean} details.isMasterKey
     *
     * @returns {Promise<Object>}
     */

    /**
     *
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.document
     *
     * @returns {Promise}
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.document
     *
     * @returns {Promise}
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.query
     *
     * @returns {Promise<Object>} result
     */

    /**
     * Get file from gridfs
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.filename
     *
     * @returns {Promise<Object>} file
     */

    /**
     * Get fileStream from gridfs
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.fileId
     *
     * @returns {Filestream} filestream
     */

    /**
     * Delete file from gridfs
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.filename
     *
     * @returns {Promise<boolean>}
     */

    /**
     * Save filestream to gridfs
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {Filestream} details.fileStream
     * @param {string} details.fileName
     * @param {string} details.contentType
     *
     * @returns {Promise<Object>} file
     */

    /**
     * @param {Object} query
     *
     * @returns {Object} sanitizedQuery
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {string} details.document
     *
     * @returns {Promise<Object>} document
     */

    /**
     * @param {Object} document
     *
     * @returns {Object} serializedDocument
     */

    /**
     * @param {Array|Object} docs document or documents
     *
     * @returns {Array|Object} document or documents
     */

    /**
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {string} details.indexString
     *
     * @returns {Promise<Object|undefined>}
     */

    /**
    * @param {Object} details
    * @param {Object} details.client
    * @param {string} details.appId
    * @param {string} details.tableName
    * @param {Object} details.query
    *
    * @returns {Promise<Object|undefined>}
    */

    /**
     *
     * @param {Object} details
     * @param {string} details.appId
     * @param {Object} details.replSet
     *
     * @return {Promise<Object>} db
     */

    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     *
     * @returns {Promise}
     */
    value: function deleteDatabase(_ref) {
      var client = _ref.client,
          appId = _ref.appId;
      var database = client.db(appId);
      return database.dropDatabase();
    }
    /**
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Object} details.column
     *
     * @returns {Promise}
     */

  }, {
    key: "addColumn",
    value: function addColumn(_ref2) {
      var client = _ref2.client,
          appId = _ref2.appId,
          tableName = _ref2.tableName,
          column = _ref2.column;

      if (column.dataType === 'GeoPoint' || column.dataType === 'Text') {
        return MongoAdapter.createIndex({
          client: client,
          appId: appId,
          tableName: tableName,
          columnName: column.name,
          columnType: column.dataType
        });
      }
    }
    /**
     *
     * @param {Object} details
     * @param {Object} details.client
     * @param {string} details.appId
     * @param {string} details.tableName
     * @param {Array} details.schema
     *
     * @returns {Promise}
     */

  }]);
  return MongoAdapter;
}(_dataAdaptorBase["default"]);

(0, _defineProperty2["default"])(MongoAdapter, "connect",
/*#__PURE__*/
function () {
  var _ref4 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(_ref3) {
    var connectionString, client;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connectionString = _ref3.connectionString;
            _context.next = 3;
            return MongoClient.connect(connectionString, {
              poolSize: 200,
              useNewUrlParser: true
            });

          case 3:
            client = _context.sent;
            return _context.abrupt("return", client);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref4.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "_replSet", function (configs) {
  var connectionString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (Array.isArray(configs) && configs.length > 0) {
    var servers = configs.map(function (config) {
      return new Server(config.host, parseInt(config.port, 10));
    });
    var replSet = new ReplSet(servers);
    return replSet;
  }

  var connectionStringParser = new _connectionStringParser.ConnectionStringParser({
    scheme: "mongodb",
    hosts: []
  });
  var connectionObject = connectionStringParser.parse(connectionString);
  return new ReplSet(connectionObject.hosts);
});
(0, _defineProperty2["default"])(MongoAdapter, "disconnect", function (client) {
  client.close();
});
(0, _defineProperty2["default"])(MongoAdapter, "findById",
/*#__PURE__*/
function () {
  var _ref6 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(_ref5) {
    var client, appId, tableName, documentId, accessList, isMasterKey;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            client = _ref5.client, appId = _ref5.appId, tableName = _ref5.tableName, documentId = _ref5.documentId, accessList = _ref5.accessList, isMasterKey = _ref5.isMasterKey;
            return _context2.abrupt("return", MongoAdapter.findOne({
              client: client,
              appId: appId,
              tableName: tableName,
              query: {
                _id: documentId
              },
              accessList: accessList,
              isMasterKey: isMasterKey
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref6.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "_include",
/*#__PURE__*/
function () {
  var _ref7 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(appId, include, docs) {
    var currentDocs, join, promises, _loop, i;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            currentDocs = (0, _toConsumableArray2["default"])(docs); // This function is for joins. :)

            join = []; // include and merge all the documents.

            promises = [];
            include.sort();

            _loop = function _loop(_i) {
              var _include$_i$split = include[_i].split('.'),
                  _include$_i$split2 = (0, _slicedToArray2["default"])(_include$_i$split, 1),
                  columnName = _include$_i$split2[0];

              join.push(columnName);

              for (var k = 1; k < include.length; k++) {
                if (columnName === include[k].split('.')[0]) {
                  _i += 1;
                } else {
                  break;
                }
              } // include this column and merge.


              var idList = [];
              var tableName = null;
              currentDocs.forEach(function (doc) {
                if (doc[columnName] !== null) {
                  // checks if the doc[columnName] is an list of relations or a relation
                  if (Object.getPrototypeOf(doc[columnName]) === Object.prototype) {
                    if (doc[columnName] && doc[columnName]._id) {
                      if (doc[columnName]._type === 'file') {
                        tableName = '_File';
                      } else {
                        tableName = doc[columnName]._tableName;
                      }

                      idList.push(doc[columnName]._id);
                    }
                  } else {
                    for (var j = 0; j < doc[columnName].length; j++) {
                      if (doc[columnName][j] && doc[columnName][j]._id) {
                        if (doc[columnName][j]._type === 'file') {
                          tableName = '_File';
                        } else {
                          tableName = doc[columnName][j]._tableName;
                        }

                        idList.push(doc[columnName][j]._id);
                      }
                    }
                  }
                }
              });
              var query = {
                _id: {
                  $in: idList
                }
              };
              promises.push(MongoAdapter._fetch_data(appId, tableName, query));
              i = _i;
            };

            for (i = 0; i < include.length; i++) {
              _loop(i);
            }

            return _context3.abrupt("return", Promise.all(promises).then(function (arrayOfDocs) {
              var pr = [];
              var rInclude = [];

              for (var _i2 = 0; _i2 < join.length; _i2++) {
                for (var k = 0; k < include.length; k++) {
                  if (join[_i2] === include[k].split('.')[0]) rInclude.push(include[k]);
                }

                for (var _k = 0; _k < rInclude.length; _k++) {
                  rInclude[_k] = rInclude[_k].split('.').splice(1, 1).join('.');
                }

                for (var _k2 = 0; _k2 < rInclude.length; _k2++) {
                  if (rInclude[_k2] === join[_i2] || rInclude[_k2] === '') {
                    rInclude.splice(_k2, 1);
                    _k2 -= 1;
                  }
                }

                if (rInclude.length > 0) {
                  pr.push(MongoAdapter._include(appId, rInclude, arrayOfDocs[_i2]));
                } else {
                  pr.push(Promise.resolve(arrayOfDocs[_i2]));
                }
              }

              return Promise.all(pr).then(function (_arrayOfDocs) {
                for (var _i3 = 0; _i3 < currentDocs.length; _i3++) {
                  for (var j = 0; j < join.length; j++) {
                    // if the doc contains an relation with a columnName.
                    var relationalDoc = currentDocs[_i3][join[j]];

                    if (relationalDoc) {
                      var rel = null;

                      if (Array.isArray(relationalDoc)) {
                        for (var m = 0; m < relationalDoc.length; m++) {
                          for (var _k3 = 0; _k3 < _arrayOfDocs[j].length; _k3++) {
                            if (_arrayOfDocs[j][_k3]._id.toString() === relationalDoc[m]._id.toString()) {
                              rel = _arrayOfDocs[j][_k3];
                              break;
                            }
                          }

                          if (rel) {
                            currentDocs[_i3][include[j]][m] = rel;
                          }
                        }
                      } else {
                        for (var _k4 = 0; _k4 < _arrayOfDocs[j].length; _k4++) {
                          if (_arrayOfDocs[j][_k4]._id.toString() === relationalDoc._id.toString()) {
                            rel = _arrayOfDocs[j][_k4];
                            break;
                          }
                        }

                        if (rel) {
                          currentDocs[_i3][join[j]] = rel;
                        }
                      }
                    }
                  }
                }

                var deserializedDocs = MongoAdapter.deserialize(currentDocs);
                return deserializedDocs;
              });
            }));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3, _x4, _x5) {
    return _ref7.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "_fetch_data",
/*#__PURE__*/
function () {
  var _ref8 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee4(client, appId, tableName, qry) {
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(!tableName || !qry._id.$in)) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return", []);

          case 2:
            return _context4.abrupt("return", client.db(appId).collection(tableName).find(qry).toArray());

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x6, _x7, _x8, _x9) {
    return _ref8.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "find",
/*#__PURE__*/
function () {
  var _ref10 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee5(_ref9) {
    var client, appId, tableName, query, select, sort, limit, skip, accessList, isMasterKey, collection, include, oldQuery, aclQuery, findQuery, documents, deserializedDocuments;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            client = _ref9.client, appId = _ref9.appId, tableName = _ref9.tableName, query = _ref9.query, select = _ref9.select, sort = _ref9.sort, limit = _ref9.limit, skip = _ref9.skip, accessList = _ref9.accessList, isMasterKey = _ref9.isMasterKey;
            collection = client.db(appId).collection(tableName);
            include = [];
            /* query for expires */

            if (!query.$or) {
              query.$or = [{
                expires: null
              }, {
                expires: {
                  $gte: new Date()
                }
              }];
            } else {
              oldQuery = query.$or;

              if (oldQuery[0].$include) {
                if (oldQuery[0].$include.length > 0) {
                  include = include.concat(oldQuery[0].$include);
                }

                delete oldQuery[0].$include;
                delete oldQuery[0].$includeList;
              }

              if (oldQuery[1]) {
                if (oldQuery[1].$include) {
                  if (oldQuery[1].$include.length > 0) {
                    include = include.concat(oldQuery[1].$include);
                  }

                  delete oldQuery[1].$include;
                  delete oldQuery[1].$includeList;
                }
              }

              query.$and = [{
                $or: oldQuery
              }, {
                $or: [{
                  expires: null
                }, {
                  expires: {
                    $gte: new Date().getTime()
                  }
                }]
              }];
              delete query.$or;
            }

            if (!select || Object.keys(select).length === 0) {
              select = {};
            } else {
              // defult columns which should be selected.
              select.ACL = 1;
              select.createdAt = 1;
              select.updatedAt = 1;
              select._id = 1;
              select._tableName = 1;
              select._type = 1;
              select.expires = 1;
            }

            if (!sort) {
              sort = {};
            } // default sort added

            /*
              without sort if limit and skip are used,
              the records are returned out of order.
              To solve this default sort in ascending order of 'createdAt' is added
            */


            if (!sort.createdAt) sort.createdAt = 1;
            if (!limit || limit === -1) limit = 20;

            if (!isMasterKey) {
              // if its not master key then apply ACL.
              if (accessList.userId) {
                aclQuery = [{
                  $or: [{
                    'ACL.read.allow.user': 'all'
                  }, {
                    'ACL.read.allow.user': accessList.userId
                  }, {
                    'ACL.read.allow.role': {
                      $in: accessList.roles
                    }
                  }]
                }, {
                  $and: [{
                    'ACL.read.deny.user': {
                      $ne: accessList.userId
                    }
                  }, {
                    'ACL.read.deny.role': {
                      $nin: accessList.roles
                    }
                  }]
                }];
                if (query.$and) query.$and.push({
                  $and: aclQuery
                });else query.$and = aclQuery;
              } else {
                query['ACL.read.allow.user'] = 'all';
              }
            } // check for include.


            if (query.$include) {
              if (query.$include.length > 0) {
                include = include.concat(query.$include);
              }
            } // delete $include and $includeList recursively


            query = MongoAdapter._sanitizeQuery(query);
            findQuery = collection.find(query).project(select);

            if (Object.keys(sort).length > 0) {
              findQuery = findQuery.sort(sort);
            }

            if (skip) {
              if (Object.keys(sort).length === 0) {
                // default sort it in desc order on createdAt
                findQuery = findQuery.sort({
                  createdAt: -1
                });
              }

              findQuery = findQuery.skip(skip);
            }

            findQuery = findQuery.limit(limit);
            _context5.next = 17;
            return findQuery.toArray();

          case 17:
            documents = _context5.sent;

            if (!(!include || include.length === 0)) {
              _context5.next = 21;
              break;
            }

            deserializedDocuments = MongoAdapter.deserialize(documents);
            return _context5.abrupt("return", deserializedDocuments);

          case 21:
            return _context5.abrupt("return", MongoAdapter._include({
              appId: appId,
              include: include,
              documents: documents
            }));

          case 22:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function (_x10) {
    return _ref10.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "findOne",
/*#__PURE__*/
function () {
  var _ref12 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee6(_ref11) {
    var client, appId, tableName, query, select, sort, skip, accessList, isMasterKey, documents;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            client = _ref11.client, appId = _ref11.appId, tableName = _ref11.tableName, query = _ref11.query, select = _ref11.select, sort = _ref11.sort, skip = _ref11.skip, accessList = _ref11.accessList, isMasterKey = _ref11.isMasterKey;
            _context6.next = 3;
            return MongoAdapter.find({
              client: client,
              appId: appId,
              tableName: tableName,
              query: query,
              select: select,
              sort: sort,
              skip: skip,
              accessList: accessList,
              isMasterKey: isMasterKey
            });

          case 3:
            documents = _context6.sent;

            if (!(Array.isArray(documents) && documents.length > 0)) {
              _context6.next = 6;
              break;
            }

            return _context6.abrupt("return", documents[0]);

          case 6:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function (_x11) {
    return _ref12.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "save",
/*#__PURE__*/
function () {
  var _ref14 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee7(_ref13) {
    var client, appId, documents, savePromises;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            client = _ref13.client, appId = _ref13.appId, documents = _ref13.documents;
            savePromises = documents.map(function (document) {
              return MongoAdapter._save({
                client: client,
                appId: appId,
                tableName: document._tableName,
                document: document
              });
            });
            return _context7.abrupt("return", Promise.all(savePromises));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function (_x12) {
    return _ref14.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "_update",
/*#__PURE__*/
function () {
  var _ref16 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee8(_ref15) {
    var client, appId, tableName, document, collection;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            client = _ref15.client, appId = _ref15.appId, tableName = _ref15.tableName, document = _ref15.document;
            collection = client.db(appId).collection(tableName);
            _context8.next = 4;
            return collection.updateOne({
              _id: document._id
            }, {
              $set: document
            }, {
              upsert: true
            });

          case 4:
            return _context8.abrupt("return", document);

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function (_x13) {
    return _ref16.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "count",
/*#__PURE__*/
function () {
  var _ref18 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee9(_ref17) {
    var client, appId, tableName, query, skip, collection, cleanQuery, findQuery;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            client = _ref17.client, appId = _ref17.appId, tableName = _ref17.tableName, query = _ref17.query, skip = _ref17.skip;
            collection = client.db(appId).collection(tableName); // delete $include and $includeList recursively

            cleanQuery = MongoAdapter._sanitizeQuery(query);
            findQuery = collection.find(cleanQuery);

            if (skip) {
              findQuery = findQuery.skip(parseInt(skip, 10));
            }

            return _context9.abrupt("return", findQuery.count(cleanQuery));

          case 6:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function (_x14) {
    return _ref18.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "distinct",
/*#__PURE__*/
function () {
  var _ref20 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee10(_ref19) {
    var client, appId, tableName, onKey, query, select, sort, limit, skip, collection, include, keys, indexForDot, pipeline, cursor, documents, includedDocuments, deserializedDocuments;
    return _regenerator["default"].wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            client = _ref19.client, appId = _ref19.appId, tableName = _ref19.tableName, onKey = _ref19.onKey, query = _ref19.query, select = _ref19.select, sort = _ref19.sort, limit = _ref19.limit, skip = _ref19.skip;
            collection = client.db(appId).collection(tableName);
            include = [];

            if (query.$include) {
              if (query.$include.length > 0) {
                include = include.concat(query.$include);
              }
            } // delete $include and $includeList recursively


            query = MongoAdapter._sanitizeQuery(query);
            keys = {};
            indexForDot = onKey.indexOf('.'); // if DOT in onKey
            //  keys = { beforeDot: { afterDot : "$beforeDot.afterDot"} }
            // else
            //  keys = { onKey : "$"+onKey }

            if (indexForDot !== -1) {
              // not using computed properties as it may not be available in server's nodejs version
              keys[onKey.slice(0, indexForDot)] = {};
              keys[onKey.slice(0, indexForDot)][onKey.slice(indexForDot + 1)] = "$".concat(onKey);
            } else keys[onKey] = "$".concat(onKey);

            if (!sort || Object.keys(sort).length === 0) sort = {
              createdAt: 1
            };

            if (!query || Object.keys(query).length === 0) {
              query = {
                _id: {
                  $exists: true
                }
              };
            }

            pipeline = [];
            pipeline.push({
              $match: query
            });
            pipeline.push({
              $sort: sort
            }); // push the distinct aggregation.

            pipeline.push({
              $group: {
                _id: keys,
                document: {
                  $first: '$$ROOT'
                }
              }
            });

            if (skip && skip !== 0) {
              pipeline.push({
                $skip: skip
              });
            }

            if (limit && limit !== 0) {
              pipeline.push({
                $limit: limit
              });
            }

            if (select && Object.keys(select).length > 0) {
              pipeline.push({
                $project: {
                  document: select
                }
              });
            }

            _context10.next = 19;
            return collection.aggregate(pipeline);

          case 19:
            cursor = _context10.sent;
            _context10.next = 22;
            return cursor.toArray();

          case 22:
            documents = _context10.sent;
            includedDocuments = MongoAdapter._include(appId, include, documents);
            deserializedDocuments = MongoAdapter.deserialize(includedDocuments);
            return _context10.abrupt("return", deserializedDocuments);

          case 26:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function (_x15) {
    return _ref20.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "aggregate",
/*#__PURE__*/
function () {
  var _ref22 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee11(_ref21) {
    var client, appId, tableName, pipeline, limit, skip, accessList, isMasterKey, collection, query, aclQuery;
    return _regenerator["default"].wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            client = _ref21.client, appId = _ref21.appId, tableName = _ref21.tableName, pipeline = _ref21.pipeline, limit = _ref21.limit, skip = _ref21.skip, accessList = _ref21.accessList, isMasterKey = _ref21.isMasterKey;
            collection = client.db(appId).collection(tableName);
            query = {};

            if (pipeline.length > 0 && pipeline[0] && pipeline[0].$match) {
              query = pipeline[0].$match;
              pipeline.shift(); // remove first element.
            }

            if (!isMasterKey) {
              // if its not master key then apply ACL.
              if (accessList.userId) {
                aclQuery = [{
                  $or: [{
                    'ACL.read.allow.user': 'all'
                  }, {
                    'ACL.read.allow.user': accessList.userId
                  }, {
                    'ACL.read.allow.role': {
                      $in: accessList.roles
                    }
                  }]
                }, {
                  $and: [{
                    'ACL.read.deny.user': {
                      $ne: accessList.userId
                    }
                  }, {
                    'ACL.read.deny.role': {
                      $nin: accessList.roles
                    }
                  }]
                }];
                if (query.$and) query.$and.push({
                  $and: aclQuery
                });else query.$and = aclQuery;
              } else {
                query['ACL.read.allow.user'] = 'all';
              }
            }

            if (!query.$or) {
              query.$or = [{
                expires: null
              }, {
                expires: {
                  $gte: new Date()
                }
              }];
            }

            pipeline.unshift({
              $match: query
            }); // add item to the begining of the pipeline.

            if (skip && skip !== 0) {
              pipeline.push({
                $skip: skip
              });
            }

            if (limit && limit !== 0) {
              pipeline.push({
                $limit: limit
              });
            }

            return _context11.abrupt("return", collection.aggregate(pipeline));

          case 10:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function (_x16) {
    return _ref22.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "_insert",
/*#__PURE__*/
function () {
  var _ref24 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee12(_ref23) {
    var client, appId, tableName, document;
    return _regenerator["default"].wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            client = _ref23.client, appId = _ref23.appId, tableName = _ref23.tableName, document = _ref23.document;
            return _context12.abrupt("return", client.db(appId).collection(tableName).save(document));

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function (_x17) {
    return _ref24.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "delete",
/*#__PURE__*/
function () {
  var _ref26 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee13(_ref25) {
    var client, appId, tableName, document, documentId, collection, query, doc;
    return _regenerator["default"].wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            client = _ref25.client, appId = _ref25.appId, tableName = _ref25.tableName, document = _ref25.document;
            documentId = document._id;

            if (document._id) {
              _context13.next = 4;
              break;
            }

            throw new _errors["default"].InvalidAccessError();

          case 4:
            collection = client.db(appId).collection(tableName);
            query = {
              _id: documentId
            };
            _context13.next = 8;
            return collection.remove(query, {
              w: 1 // returns the number of documents removed

            });

          case 8:
            doc = _context13.sent;

            if (!(doc.result.n === 0)) {
              _context13.next = 11;
              break;
            }

            throw new _errors["default"].WrongPermissionError();

          case 11:
            return _context13.abrupt("return", doc.result);

          case 12:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function (_x18) {
    return _ref26.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "deleteByQuery",
/*#__PURE__*/
function () {
  var _ref28 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee14(_ref27) {
    var client, appId, tableName, query, collection, doc;
    return _regenerator["default"].wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            client = _ref27.client, appId = _ref27.appId, tableName = _ref27.tableName, query = _ref27.query;
            collection = client.db(appId).collection(tableName);
            _context14.next = 4;
            return collection.remove(query, {
              w: 1 // returns the number of documents removed

            });

          case 4:
            doc = _context14.sent;
            return _context14.abrupt("return", doc.result);

          case 6:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function (_x19) {
    return _ref28.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "getFile",
/*#__PURE__*/
function () {
  var _ref30 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee15(_ref29) {
    var client, appId, filename;
    return _regenerator["default"].wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            client = _ref29.client, appId = _ref29.appId, filename = _ref29.filename;
            return _context15.abrupt("return", client.db(appId).collection('fs.files').findOne({
              filename: filename
            }));

          case 2:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function (_x20) {
    return _ref30.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "getFileStreamById", function (_ref31) {
  var client = _ref31.client,
      appId = _ref31.appId,
      fileId = _ref31.fileId;
  var gfs = (0, _gridfsStream["default"])(client.db(appId), _mongodb["default"]);
  var readstream = gfs.createReadStream({
    _id: fileId
  });
  return readstream;
});
(0, _defineProperty2["default"])(MongoAdapter, "deleteFileFromGridFs",
/*#__PURE__*/
function () {
  var _ref33 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee16(_ref32) {
    var client, appId, filename, document, id;
    return _regenerator["default"].wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            client = _ref32.client, appId = _ref32.appId, filename = _ref32.filename;
            _context16.next = 3;
            return client.db(appId).collection('fs.files').findOne({
              filename: filename
            });

          case 3:
            document = _context16.sent;

            if (!document) {
              _context16.next = 7;
              break;
            }

            id = document._id;
            return _context16.abrupt("return", client.db(appId).collection('fs').deleteMany({
              _id: id
            }));

          case 7:
            throw new _errors["default"].FileDoesNotExistError();

          case 8:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function (_x21) {
    return _ref33.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "saveFileStream", function (_ref34) {
  var client = _ref34.client,
      appId = _ref34.appId,
      fileStream = _ref34.fileStream,
      fileName = _ref34.fileName,
      contentType = _ref34.contentType;
  return new Promise(function (resolve, reject) {
    try {
      var bucket = new _mongodb["default"].GridFSBucket(client.db(appId));
      var writeStream = bucket.openUploadStream(fileName, {
        contentType: contentType,
        w: 1
      });
      fileStream.pipe(writeStream).on('error', function (err) {
        writeStream.destroy();
        reject(err);
      }).on('finish', function (file) {
        resolve(file);
      });
    } catch (error) {
      reject(error);
    }
  });
});
(0, _defineProperty2["default"])(MongoAdapter, "_sanitizeQuery", function (query) {
  if (query) {
    var sanitizedQuery = JSON.parse(JSON.stringify(query));

    if (sanitizedQuery.$includeList) {
      delete sanitizedQuery.$includeList;
    }

    if (sanitizedQuery.$include) {
      delete sanitizedQuery.$include;
    }

    if (sanitizedQuery.$or && sanitizedQuery.$or.length > 0) {
      for (var _i4 = 0; _i4 < sanitizedQuery.$or.length; ++_i4) {
        sanitizedQuery.$or[_i4] = MongoAdapter._sanitizeQuery(sanitizedQuery.$or[_i4]);
      }
    }

    if (sanitizedQuery.$and && sanitizedQuery.$and.length > 0) {
      for (var _i5 = 0; _i5 < sanitizedQuery.$and.length; ++_i5) {
        sanitizedQuery.$and[_i5] = MongoAdapter._sanitizeQuery(sanitizedQuery.$and[_i5]);
      }
    }

    return sanitizedQuery;
  }
});
(0, _defineProperty2["default"])(MongoAdapter, "_save",
/*#__PURE__*/
function () {
  var _ref36 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee17(_ref35) {
    var client, appId, tableName, document, documentCopy, serializedDocument, updatedDocument, deserializedDocument;
    return _regenerator["default"].wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            client = _ref35.client, appId = _ref35.appId, tableName = _ref35.tableName, document = _ref35.document;
            documentCopy = (0, _objectSpread2["default"])({}, document);

            if (documentCopy._isModified) {
              delete documentCopy._isModified;
            }

            if (document._modifiedColumns) {
              delete documentCopy._modifiedColumns;
            }

            serializedDocument = MongoAdapter.serialize(documentCopy); // column key array to track sub documents.

            _context17.next = 7;
            return MongoAdapter._update({
              client: client,
              appId: appId,
              tableName: tableName,
              document: serializedDocument
            });

          case 7:
            updatedDocument = _context17.sent;
            deserializedDocument = MongoAdapter.deserialize(updatedDocument);
            return _context17.abrupt("return", deserializedDocument);

          case 10:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function (_x22) {
    return _ref36.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "serialize", function (document) {
  var serializedDocument = JSON.parse(JSON.stringify(document));
  Object.keys(serializedDocument).forEach(function (key) {
    if (serializedDocument[key]) {
      if (serializedDocument[key].constructor === Object && serializedDocument[key]._type) {
        if (serializedDocument[key]._type === 'point') {
          var _obj = {};
          _obj.type = 'Point';
          _obj.coordinates = document[key].coordinates;
          serializedDocument[key] = _obj;
        }
      }

      if (key === 'createdAt' || key === 'updatedAt' || key === 'expires') {
        if (typeof serializedDocument[key] === 'string') {
          serializedDocument[key] = new Date(serializedDocument[key]);
        }
      }
    }
  });
  return serializedDocument;
});
(0, _defineProperty2["default"])(MongoAdapter, "deserialize", function (docs) {
  if (docs.length > 0) {
    for (var _i6 = 0; _i6 < docs.length; _i6++) {
      var document = docs[_i6];
      var docKeys = Object.keys(document);

      for (var j = 0; j < docKeys.length; j++) {
        var key = docKeys[j];

        if (document[key]) {
          if (document[key].constructor === Object && document[key].type) {
            if (document[key].type === 'Point') {
              var _obj = {};
              _obj._type = 'point';
              _obj.coordinates = document[key].coordinates;
              _obj.latitude = _obj.coordinates[1]; // eslint-disable-line

              _obj.longitude = _obj.coordinates[0]; // eslint-disable-line

              document[key] = _obj;
            }
          } else if (document[key].constructor === Array && document[key][0] && document[key][0].type && document[key][0].type === 'Point') {
            var arr = [];

            for (var k = 0; k < document[key].length; k++) {
              var _obk = {};
              _obk._type = 'point';
              _obk.coordinates = document[key][k].coordinates;
              _obk.latitude = _obk.coordinates[1]; // eslint-disable-line

              _obk.longitude = _obk.coordinates[0]; // eslint-disable-line

              arr.push(_obk);
            }

            document[key] = arr;
          }
        }
      }

      docs[_i6] = document;
    }
  } else {
    var _document = docs;

    var _docKeys = Object.keys(_document);

    for (var _k5 = 0; _k5 < _docKeys.length; _k5++) {
      var _key = _docKeys[_k5];

      if (_document[_key]) {
        if (_document[_key].constructor === Object && _document[_key].type) {
          if (_document[_key].type === 'Point') {
            var _obj2 = {};
            _obj2._type = 'point';
            _obj2.coordinates = _document[_key].coordinates;
            _obj2.latitude = _obj2.coordinates[1]; // eslint-disable-line

            _obj2.longitude = _obj2.coordinates[0]; // eslint-disable-line

            _document[_key] = _obj2;
          }
        } else if (_document[_key].constructor === Array && _document[_key][0] && _document[_key][0].type && _document[_key][0].type === 'Point') {
          var _arr = [];

          for (var _j = 0; _j < _document[_key].length; _j++) {
            var _obj3 = {};
            _obj3._type = 'point';
            _obj3.coordinates = _document[_key][_j].coordinates;
            _obj3.latitude = _obj3.coordinates[1]; // eslint-disable-line

            _obj3.longitude = _obj3.coordinates[0]; // eslint-disable-line

            _arr.push(_obj3);
          }

          _document[_key] = _arr;
        }
      }
    }

    docs = _document;
  }

  return docs;
});
(0, _defineProperty2["default"])(MongoAdapter, "_dropIndex",
/*#__PURE__*/
function () {
  var _ref38 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee18(_ref37) {
    var client, appId, tableName, indexString, collection;
    return _regenerator["default"].wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            client = _ref37.client, appId = _ref37.appId, tableName = _ref37.tableName, indexString = _ref37.indexString;

            if (!(indexString && indexString !== '')) {
              _context18.next = 4;
              break;
            }

            collection = client.db(appId).collection(tableName);
            return _context18.abrupt("return", collection.dropIndex(indexString));

          case 4:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function (_x23) {
    return _ref38.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "_unsetColumn",
/*#__PURE__*/
function () {
  var _ref40 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee19(_ref39) {
    var client, appId, tableName, query, collection;
    return _regenerator["default"].wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            client = _ref39.client, appId = _ref39.appId, tableName = _ref39.tableName, query = _ref39.query;

            if (!(query && Object.keys(query).length > 0)) {
              _context19.next = 4;
              break;
            }

            collection = client.db(appId).collection(tableName);
            return _context19.abrupt("return", collection.update({}, {
              $unset: query
            }, {
              multi: true
            }));

          case 4:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function (_x24) {
    return _ref40.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "createDatabase",
/*#__PURE__*/
function () {
  var _ref42 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee20(_ref41) {
    var appId, replSet, db;
    return _regenerator["default"].wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            appId = _ref41.appId, replSet = _ref41.replSet;
            db = new Db(appId, replSet, {
              w: 1
            });
            return _context20.abrupt("return", db);

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function (_x25) {
    return _ref42.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "createCollection",
/*#__PURE__*/
function () {
  var _ref44 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee21(_ref43) {
    var client, appId, tableName, schemas, _i7;

    return _regenerator["default"].wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            client = _ref43.client, appId = _ref43.appId, tableName = _ref43.tableName, schemas = _ref43.schemas;
            _i7 = 0;

          case 2:
            if (!(_i7 < schemas.length)) {
              _context21.next = 9;
              break;
            }

            if (!(schemas[_i7].dataType === 'GeoPoint')) {
              _context21.next = 6;
              break;
            }

            _context21.next = 6;
            return MongoAdapter.createIndex({
              client: client,
              appId: appId,
              tableName: tableName,
              columnName: schemas[_i7].name,
              columnType: schemas[_i7].dataType
            });

          case 6:
            _i7++;
            _context21.next = 2;
            break;

          case 9:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function (_x26) {
    return _ref44.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "createIndex",
/*#__PURE__*/
function () {
  var _ref46 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee22(_ref45) {
    var client, appId, tableName, columnName, columnType, obj;
    return _regenerator["default"].wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            client = _ref45.client, appId = _ref45.appId, tableName = _ref45.tableName, columnName = _ref45.columnName, columnType = _ref45.columnType;
            obj = {};

            if (columnType === 'Text') {
              obj['$**'] = 'text';
            }

            if (columnType === 'GeoPoint') {
              obj[columnName] = '2dsphere';
            }

            if (!(Object.keys(obj).length > 0)) {
              _context22.next = 6;
              break;
            }

            return _context22.abrupt("return", client.db(appId).collection(tableName).createIndex(obj));

          case 6:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));

  return function (_x27) {
    return _ref46.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "deleteAndCreateTextIndexes",
/*#__PURE__*/
function () {
  var _ref48 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee23(_ref47) {
    var client, appId, tableName;
    return _regenerator["default"].wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            client = _ref47.client, appId = _ref47.appId, tableName = _ref47.tableName;
            return _context23.abrupt("return", client.db(appId).collection(tableName).createIndex({
              '$**': 'text'
            }));

          case 2:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));

  return function (_x28) {
    return _ref48.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "getIndexes",
/*#__PURE__*/
function () {
  var _ref50 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee24(_ref49) {
    var client, appId, tableName;
    return _regenerator["default"].wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            client = _ref49.client, appId = _ref49.appId, tableName = _ref49.tableName;
            return _context24.abrupt("return", client.db(appId).collection(tableName).indexInformation());

          case 2:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));

  return function (_x29) {
    return _ref50.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "renameColumn",
/*#__PURE__*/
function () {
  var _ref52 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee25(_ref51) {
    var client, appId, tableName, oldColumnName, newColumnName, collection, query;
    return _regenerator["default"].wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            client = _ref51.client, appId = _ref51.appId, tableName = _ref51.tableName, oldColumnName = _ref51.oldColumnName, newColumnName = _ref51.newColumnName;
            collection = client.db(appId).collection(tableName);
            query = {};
            query[oldColumnName] = newColumnName;
            return _context25.abrupt("return", collection.update({}, {
              $rename: query
            }, {
              multi: true
            }));

          case 5:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));

  return function (_x30) {
    return _ref52.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "deleteColumn",
/*#__PURE__*/
function () {
  var _ref54 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee26(_ref53) {
    var client, appId, tableName, columnName, columnType, query, indexName;
    return _regenerator["default"].wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            client = _ref53.client, appId = _ref53.appId, tableName = _ref53.tableName, columnName = _ref53.columnName, columnType = _ref53.columnType;
            query = {};
            query[columnName] = 1;
            indexName = null;

            if (columnType === 'GeoPoint') {
              indexName = "".concat(columnName, "_2dsphere");
            }

            _context26.next = 7;
            return MongoAdapter._dropIndex({
              client: client,
              appId: appId,
              tableName: tableName,
              indexName: indexName
            });

          case 7:
            _context26.next = 9;
            return MongoAdapter._unsetColumn({
              client: client,
              appId: appId,
              tableName: tableName,
              query: query
            });

          case 9:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));

  return function (_x31) {
    return _ref54.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "deleteTable",
/*#__PURE__*/
function () {
  var _ref56 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee27(_ref55) {
    var client, appId, tableName;
    return _regenerator["default"].wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            client = _ref55.client, appId = _ref55.appId, tableName = _ref55.tableName;
            return _context27.abrupt("return", client.db(appId).collection(tableName).drop());

          case 2:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));

  return function (_x32) {
    return _ref56.apply(this, arguments);
  };
}());
(0, _defineProperty2["default"])(MongoAdapter, "renameTable",
/*#__PURE__*/
function () {
  var _ref58 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee28(_ref57) {
    var client, appId, oldtableName, newtableName;
    return _regenerator["default"].wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            client = _ref57.client, appId = _ref57.appId, oldtableName = _ref57.oldtableName, newtableName = _ref57.newtableName;
            return _context28.abrupt("return", client.db(appId).collection(oldtableName).rename(newtableName));

          case 2:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));

  return function (_x33) {
    return _ref58.apply(this, arguments);
  };
}());
var _default = MongoAdapter;
exports["default"] = _default;